1. multer needs to be used - especially to upload/use file(s)
2. reCaptcha implementation must be very clean
3. add more xLog statements whereever possible...
4. check if reflector getMembers consider conditional members? it should.
5. Solve prod issues:
   - minification not working currently, hence turned off via minify = false in config
   - pm2 setup for running node
6. add check attribute 
attr('check', 'null', false);
attr('check', 'type', 'number');
attr('check', 'range', 0, 10);
attr('check', myFn1, 'gte', 7);
attr('check', myFn2, false);
OR
attr('check, 
    ['null', false],
    ['type', 'number'],
    ['range', 0, 10]
    [myFn1, 'gte', 7]
    [myFn2, false]
)
many more...

Allow routes to be added on server and client by a function call with same interface as otherwise
Get rid of more.bootwares... etc. instead add them at cli time
Make main module as Bootware as well --- which is booted and readied like others but at the end
this will get change in loader as well

check how to let attribute define if multiple instances of that attribute are allowed and now to throw error when more than once instance is applied


At Client:
- a handler called a local function with Data 
- which has service attribute to call a service
- interceptor in this service attribute converted data to Dto
- wherein input validations executed automatically
- and do a fetch on server which hit the service class method
At Server: 
- service class extracted Dto from request
- that got validated for input validation
- and called controller action function with Dto
- action function loaded dto into entity
- during which business rules of entity got validated
- then controller called repository to persist data 
- or to take some other action 
- Controllers may also call ServiceAdapters which call an external service

To understand entity, dto, controller, uow, and repository:
http://www.c-sharpcorner.com/UploadFile/b1df45/unit-of-work-in-repository-pattern/
https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application
