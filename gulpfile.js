const fs = require('fs');
const del = require('del');
const path = require('path');
const merge = require('merge-stream');
const gulp = require('gulp');
const eslint = require('gulp-eslint');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');
const rename = require('gulp-rename');
const injectfile = require('gulp-inject-file');
const babel = require('gulp-babel');
const pkg = require('./package.json');
const banner = fs.readFileSync('gears/system/assets/.banner').toString();
const config = JSON.parse(fs.readFileSync('.config.json').toString());

// get folders under given root
const getFolders = (root) => {
    return fs.readdirSync(root)
        .filter(function(file) {
            return fs.statSync(path.join(dir, file)).isDirectory();
    });
};

// get source excluding configured ones
const getSource = (root, folder, patterns) => {
    let src = [];
    for(let incGlob of patterns) {
        src.push(path.join(root, folder, incGlob));
    }
    if (config.source.exclude) {
        for(let exGlob of config.source.exclude) {
            src.push('!' + path.join(root, folder, exGlob));
        }
    }
    return src;
};

// all types of tasks in specific order for specified targets
const collectTasks = (roots, ...taskCreators) => {
    let tasks = [];
    for(let root of roots) {
        for (let taskCreator of taskCreators) {
            let collectedTasks = taskCreator(root);
            if (collectedTasks) { tasks.push(collectedTasks); }          
        }
    }
    return tasks;
};

// cleaner
const cleaner = (root) => {
    let folders = getFolders(root);
    if (folders.length <= 0) { return null; } 
    return folders.map((folder) => {
      return del(getSource(root, folder, ['/**/*.pack.js', '/**/*.min.js', '/**/*.min.css']));
    });
};

// delete all files which are generated by build
gulp.task('clean', () => {
    let roots = [];
    if(config.build.system) { roots = roots.concat(config.source.system); }
    if(config.build.app) { roots = roots.concat(config.source.app); }
    if(config.build.web) { roots = roots.concat(config.source.web); }
    return merge(collectTasks(roots, cleaner));
});


// const csslint = require('gulp-csslint');

// const cssFiles = [
//   '**/*.css',
//   '!node_folders/**',
//   '!build/**'
// ];  

// // CSSLint
// gulp.task('css:lint', () => {
//     return gulp.src(cssFiles)
//         .pipe(csslint('.csslint.json'))
//         .pipe(csslint.failFormatter());
// });






// get Tmpl tasks for each module folder under given folder
const getTmplTasks = (root) => {
    let folders = getFolders(root);
    if (folders.length <= 0) { return null; } 
    return folders.map((folder) => {
      return gulp.src(getSource(root, folder, '/**/*.tmpl'))
        // inject content
        .pipe(injectfile())
        // inject header
        .pipe(header(banner, { pkg : pkg } )) 
        // rename by removing .tmpl and leaving name as is    
        .pipe(rename((path) => {
            path.extname = ''; // from <name.whatever>.tmpl to <name.whatever>
        }))
        // write to output
        .pipe(gulp.dest(root)) 
    });
};

// get JS tasks for each module folder under given folder
const getJSTasks = (root) => {
    let folders = getFolders(root);
    if (folders.length <= 0) { return null; } 
    return folders.map((folder) => {
      return gulp.src(getSource(root, folder, '/**/*.js'))
        // check for issues
        .pipe(eslint('.eslint.json'))
        // format errors, if any
        .pipe(eslint.format())
        // stop if errors
        .pipe(eslint.failAfterError())
        // compile 
        .pipe(babel())
        // concat into modulename.js
        .pipe(concat(module + '.js'))
        // write to output
        .pipe(gulp.dest(root)) 
        // minify
        .pipe(uglify())    
        // rename to folder.min.js
        .pipe(rename(folder + '.min.js')) 
        // write to output again
        .pipe(gulp.dest(root));    
   });
};

// get CSS tasks for each module folder under given folder
const getCSSTasks = (root) => {
    let folders = getFolders(root);
    if (folders.length <= 0) { return null; } 
    return folders.map((folder) => {
      return gulp.src(getSource(root, folder, '/**/*.js'))
        // check for issues
        .pipe(eslint('.eslint.json'))
        // format errors, if any
        .pipe(eslint.format())
        // stop if errors
        .pipe(eslint.failAfterError())
        // compile 
        .pipe(babel())
        // concat into folder.js
        .pipe(concat(folder + '.js'))
        // write to output
        .pipe(gulp.dest(root)) 
        // minify
        .pipe(uglify())    
        // rename to folder.min.js
        .pipe(rename(folder + '.min.js')) 
        // write to output again
        .pipe(gulp.dest(root));    
   });
};


gulp.task('default', () => {
  return merge(...getAllTasks());
});